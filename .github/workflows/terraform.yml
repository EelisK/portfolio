name: "Terraform"

on:
  push:
    paths:
      - "terraform/**"
    branches:
      - main
  pull_request:
    paths:
      - "terraform/**"

jobs:
  configs:
    name: "Terraform configs"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: set-version
        run: |
          echo "::set-output name=version::$(cat .terraform-version)"

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    needs: configs
    concurrency:
      group: terraform
      cancel-in-progress: false

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ needs.configs.outputs.version }}

      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_PROJECT_ADMIN_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}
          export_default_credentials: true

      - name: Unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@8b1fa3ccc81e322c5c45fbab261eee46513fd3f8
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file=.tfvars
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=.tfvars

  terraform_format:
    name: "Terraform format"
    runs-on: ubuntu-latest
    needs: configs
    if: github.event_name == 'pull_request'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ needs.configs.outputs.version }}

      - name: Terraform fmt
        run: terraform fmt -check -recursive

  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    needs: configs
    if: github.event_name == 'pull_request'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@8b1fa3ccc81e322c5c45fbab261eee46513fd3f8
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ needs.configs.outputs.version }}
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_PROJECT_ADMIN_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}
          export_default_credentials: true
      - name: Terraform Init
        run: terraform init
      - name: Run tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@53821b4a1b22f8f4e89a788142285b46d7a0cc20
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
